{"ast":null,"code":"var _jsxFileName = \"/Users/carolinebromberg/Desktop/cozy-threads/frontend/src/Components/Checkout.js\",\n  _s = $RefreshSig$();\n// import { useCallback, useEffect } from 'react';\n// import * as React from 'react';\n// import {loadStripe} from '@stripe/stripe-js';\n// import {\n//   EmbeddedCheckoutProvider,\n//   EmbeddedCheckout\n// } from '@stripe/react-stripe-js';\n// const stripePromise = loadStripe('pk_live_51PhD3vRpA6VhXFHy5CdMHlEl7CtPIOHZ2Fu7dQunAd3K469wh3QlBpjBdN1q3EAom5VC66VTihMoO9dvEH1abBvk00hqBsWmcq');\n\n// const Checkout = ({cart}) => {\n//     const fetchClientSecret = useCallback(async () => {\n//         console.log(\"fetching client secret and sending this body: \", JSON.stringify({ items: cart }));\n//         return await fetch(\"http://localhost:4242/create-checkout-session\", {\n//             method: \"POST\",\n//             // mode: \"no-cors\",\n//             headers: { //is this necessary?\n//                 \"Content-Type\": \"application/json\"\n//             },\n//             body: JSON.stringify({ items: cart })\n//         })\n//         .then((res) => res.json())\n//         .then((data) => data.clientSecret);\n//     }, [cart]);\n\n//     useEffect(() => {\n//         fetchClientSecret();\n//     }, [cart, fetchClientSecret]);\n//     // const fetchClientSecret = useCallback(async () => {\n//     //     console.log(\"fetching client secret and sending this body: \", JSON.stringify({ items: cart }));\n//     //     try {\n//     //       const response = await fetch(\"http://localhost:4242/create-checkout-session\", {\n//     //         method: \"POST\",\n//     //         headers: {\n//     //           \"Content-Type\": \"application/json\"\n//     //         },\n//     //         body: JSON.stringify({ items: cart })\n//     //       });\n\n//     //       if (!response.ok) {\n//     //         throw new Error(`Server error: ${response.statusText}`);\n//     //       }\n\n//     //       const data = await response.json();\n//     //       return data.clientSecret;\n//     //     } catch (error) {\n//     //       console.error(\"Failed to fetch client secret:\", error);\n//     //     }\n//     //   }, [cart]);\n\n//     const options = {fetchClientSecret};\n\n//     return (\n//         <div id=\"checkout\">\n//             <EmbeddedCheckoutProvider\n//                 stripe={stripePromise}\n//                 options={options}\n//             >\n//                 <EmbeddedCheckout/>\n//             </EmbeddedCheckoutProvider>\n//         </div>\n//     );\n// }\n\n// export default Checkout;\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { EmbeddedCheckoutProvider, EmbeddedCheckout } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe('pk_live_51PhD3vRpA6VhXFHy5CdMHlEl7CtPIOHZ2Fu7dQunAd3K469wh3QlBpjBdN1q3EAom5VC66VTihMoO9dvEH1abBvk00hqBsWmcq');\nconst Checkout = ({\n  cart\n}) => {\n  _s();\n  const [clientSecret, setClientSecret] = useState('');\n\n  // Function to fetch client secret from the backend\n  const fetchClientSecret = useCallback(async () => {\n    console.log(\"Fetching client secret with cart:\", JSON.stringify({\n      items: cart\n    }));\n    try {\n      const response = await fetch(\"http://localhost:4242/create-checkout-session\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          items: cart\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setClientSecret(data.clientSecret); // Update state with the new client secret\n    } catch (error) {\n      console.error(\"Failed to fetch client secret:\", error);\n    }\n  }, [cart]); // Dependency on cart ensures this function runs when cart changes\n\n  // Effect to fetch the client secret whenever cart changes\n  useEffect(() => {\n    fetchClientSecret(); // Trigger fetch client secret\n  }, [cart, fetchClientSecret]); // Dependencies ensure it runs when cart changes\n\n  // Options object for the EmbeddedCheckoutProvider\n  const options = {\n    clientSecret,\n    appearance: {/* Customize the appearance of the embedded checkout */}\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"checkout\",\n    children: clientSecret && /*#__PURE__*/_jsxDEV(EmbeddedCheckoutProvider, {\n      stripe: stripePromise,\n      options: options,\n      children: /*#__PURE__*/_jsxDEV(EmbeddedCheckout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(Checkout, \"xOROJhffl7qqp0jzoNYtcvugNBc=\");\n_c = Checkout;\nexport default Checkout;\nvar _c;\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"names":["useCallback","useEffect","useState","loadStripe","EmbeddedCheckoutProvider","EmbeddedCheckout","jsxDEV","_jsxDEV","stripePromise","Checkout","cart","_s","clientSecret","setClientSecret","fetchClientSecret","console","log","JSON","stringify","items","response","fetch","method","headers","body","ok","Error","statusText","data","json","error","options","appearance","id","children","stripe","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carolinebromberg/Desktop/cozy-threads/frontend/src/Components/Checkout.js"],"sourcesContent":["// import { useCallback, useEffect } from 'react';\n// import * as React from 'react';\n// import {loadStripe} from '@stripe/stripe-js';\n// import {\n//   EmbeddedCheckoutProvider,\n//   EmbeddedCheckout\n// } from '@stripe/react-stripe-js';\n// const stripePromise = loadStripe('pk_live_51PhD3vRpA6VhXFHy5CdMHlEl7CtPIOHZ2Fu7dQunAd3K469wh3QlBpjBdN1q3EAom5VC66VTihMoO9dvEH1abBvk00hqBsWmcq');\n\n// const Checkout = ({cart}) => {\n//     const fetchClientSecret = useCallback(async () => {\n//         console.log(\"fetching client secret and sending this body: \", JSON.stringify({ items: cart }));\n//         return await fetch(\"http://localhost:4242/create-checkout-session\", {\n//             method: \"POST\",\n//             // mode: \"no-cors\",\n//             headers: { //is this necessary?\n//                 \"Content-Type\": \"application/json\"\n//             },\n//             body: JSON.stringify({ items: cart })\n//         })\n//         .then((res) => res.json())\n//         .then((data) => data.clientSecret);\n//     }, [cart]);\n\n//     useEffect(() => {\n//         fetchClientSecret();\n//     }, [cart, fetchClientSecret]);\n//     // const fetchClientSecret = useCallback(async () => {\n//     //     console.log(\"fetching client secret and sending this body: \", JSON.stringify({ items: cart }));\n//     //     try {\n//     //       const response = await fetch(\"http://localhost:4242/create-checkout-session\", {\n//     //         method: \"POST\",\n//     //         headers: {\n//     //           \"Content-Type\": \"application/json\"\n//     //         },\n//     //         body: JSON.stringify({ items: cart })\n//     //       });\n    \n//     //       if (!response.ok) {\n//     //         throw new Error(`Server error: ${response.statusText}`);\n//     //       }\n    \n//     //       const data = await response.json();\n//     //       return data.clientSecret;\n//     //     } catch (error) {\n//     //       console.error(\"Failed to fetch client secret:\", error);\n//     //     }\n//     //   }, [cart]);\n    \n//     const options = {fetchClientSecret};\n\n//     return (\n//         <div id=\"checkout\">\n//             <EmbeddedCheckoutProvider\n//                 stripe={stripePromise}\n//                 options={options}\n//             >\n//                 <EmbeddedCheckout/>\n//             </EmbeddedCheckoutProvider>\n//         </div>\n//     );\n// }\n\n// export default Checkout;\n\n\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { EmbeddedCheckoutProvider, EmbeddedCheckout } from '@stripe/react-stripe-js';\n\nconst stripePromise = loadStripe('pk_live_51PhD3vRpA6VhXFHy5CdMHlEl7CtPIOHZ2Fu7dQunAd3K469wh3QlBpjBdN1q3EAom5VC66VTihMoO9dvEH1abBvk00hqBsWmcq');\n\nconst Checkout = ({ cart }) => {\n    const [clientSecret, setClientSecret] = useState('');\n\n    // Function to fetch client secret from the backend\n    const fetchClientSecret = useCallback(async () => {\n        console.log(\"Fetching client secret with cart:\", JSON.stringify({ items: cart }));\n        try {\n            const response = await fetch(\"http://localhost:4242/create-checkout-session\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({ items: cart })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Server error: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            setClientSecret(data.clientSecret); // Update state with the new client secret\n        } catch (error) {\n            console.error(\"Failed to fetch client secret:\", error);\n        }\n    }, [cart]); // Dependency on cart ensures this function runs when cart changes\n\n    // Effect to fetch the client secret whenever cart changes\n    useEffect(() => {\n        fetchClientSecret(); // Trigger fetch client secret\n    }, [cart, fetchClientSecret]); // Dependencies ensure it runs when cart changes\n\n    // Options object for the EmbeddedCheckoutProvider\n    const options = {\n        clientSecret,\n        appearance: { /* Customize the appearance of the embedded checkout */ }\n    };\n\n    return (\n        <div id=\"checkout\">\n            {clientSecret && (\n                <EmbeddedCheckoutProvider\n                    stripe={stripePromise}\n                    options={options}\n                >\n                    <EmbeddedCheckout />\n                </EmbeddedCheckoutProvider>\n            )}\n        </div>\n    );\n}\n\nexport default Checkout;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,wBAAwB,EAAEC,gBAAgB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErF,MAAMC,aAAa,GAAGL,UAAU,CAAC,6GAA6G,CAAC;AAE/I,MAAMM,QAAQ,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMY,iBAAiB,GAAGd,WAAW,CAAC,YAAY;IAC9Ce,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,KAAK,EAAET;IAAK,CAAC,CAAC,CAAC;IACjF,IAAI;MACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEP,IAAI,CAACC,SAAS,CAAC;UAAEC,KAAK,EAAET;QAAK,CAAC;MACxC,CAAC,CAAC;MAEF,IAAI,CAACU,QAAQ,CAACK,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,iBAAiBN,QAAQ,CAACO,UAAU,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClChB,eAAe,CAACe,IAAI,CAAChB,YAAY,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACZf,OAAO,CAACe,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAC1D;EACJ,CAAC,EAAE,CAACpB,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ;EACAT,SAAS,CAAC,MAAM;IACZa,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC,EAAE,CAACJ,IAAI,EAAEI,iBAAiB,CAAC,CAAC,CAAC,CAAC;;EAE/B;EACA,MAAMiB,OAAO,GAAG;IACZnB,YAAY;IACZoB,UAAU,EAAE,CAAE;EAClB,CAAC;EAED,oBACIzB,OAAA;IAAK0B,EAAE,EAAC,UAAU;IAAAC,QAAA,EACbtB,YAAY,iBACTL,OAAA,CAACH,wBAAwB;MACrB+B,MAAM,EAAE3B,aAAc;MACtBuB,OAAO,EAAEA,OAAQ;MAAAG,QAAA,eAEjB3B,OAAA,CAACF,gBAAgB;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAC7B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAA5B,EAAA,CAjDKF,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AAmDd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}